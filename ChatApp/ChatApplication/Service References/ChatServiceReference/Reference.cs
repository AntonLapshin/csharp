//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.1
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ChatApplication.ChatServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserDTO", Namespace="http://schemas.datacontract.org/2004/07/ChatWcfService")]
    [System.SerializableAttribute()]
    public partial class UserDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ConnectedStatuses", Namespace="http://schemas.datacontract.org/2004/07/ChatService.Infrastructure")]
    public enum ConnectedStatuses : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        None = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AlreadyConnected = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PasswordNotValid = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Connected = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Error = 4,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MessageDTO", Namespace="http://schemas.datacontract.org/2004/07/ChatWcfService")]
    [System.SerializableAttribute()]
    public partial class MessageDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageTextField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime TimestampField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ChatApplication.ChatServiceReference.UserDTO UserField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int UserNumField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MessageText {
            get {
                return this.MessageTextField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageTextField, value) != true)) {
                    this.MessageTextField = value;
                    this.RaisePropertyChanged("MessageText");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Timestamp {
            get {
                return this.TimestampField;
            }
            set {
                if ((this.TimestampField.Equals(value) != true)) {
                    this.TimestampField = value;
                    this.RaisePropertyChanged("Timestamp");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ChatApplication.ChatServiceReference.UserDTO User {
            get {
                return this.UserField;
            }
            set {
                if ((object.ReferenceEquals(this.UserField, value) != true)) {
                    this.UserField = value;
                    this.RaisePropertyChanged("User");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UserNum {
            get {
                return this.UserNumField;
            }
            set {
                if ((this.UserNumField.Equals(value) != true)) {
                    this.UserNumField = value;
                    this.RaisePropertyChanged("UserNum");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ChatServiceReference.IChat", CallbackContract=typeof(ChatApplication.ChatServiceReference.IChatCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface IChat {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChat/Connect", ReplyAction="http://tempuri.org/IChat/ConnectResponse")]
        ChatApplication.ChatServiceReference.ConnectedStatuses Connect(ChatApplication.ChatServiceReference.UserDTO client);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IChat/Connect", ReplyAction="http://tempuri.org/IChat/ConnectResponse")]
        System.IAsyncResult BeginConnect(ChatApplication.ChatServiceReference.UserDTO client, System.AsyncCallback callback, object asyncState);
        
        ChatApplication.ChatServiceReference.ConnectedStatuses EndConnect(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChat/Say")]
        void Say(ChatApplication.ChatServiceReference.MessageDTO msg);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://tempuri.org/IChat/Say")]
        System.IAsyncResult BeginSay(ChatApplication.ChatServiceReference.MessageDTO msg, System.AsyncCallback callback, object asyncState);
        
        void EndSay(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChat/GetLogByUser", ReplyAction="http://tempuri.org/IChat/GetLogByUserResponse")]
        System.Collections.Generic.List<ChatApplication.ChatServiceReference.MessageDTO> GetLogByUser(ChatApplication.ChatServiceReference.UserDTO user);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IChat/GetLogByUser", ReplyAction="http://tempuri.org/IChat/GetLogByUserResponse")]
        System.IAsyncResult BeginGetLogByUser(ChatApplication.ChatServiceReference.UserDTO user, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<ChatApplication.ChatServiceReference.MessageDTO> EndGetLogByUser(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChat/GetLogByRangeDate", ReplyAction="http://tempuri.org/IChat/GetLogByRangeDateResponse")]
        System.Collections.Generic.List<ChatApplication.ChatServiceReference.MessageDTO> GetLogByRangeDate(System.DateTime from, System.DateTime to);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IChat/GetLogByRangeDate", ReplyAction="http://tempuri.org/IChat/GetLogByRangeDateResponse")]
        System.IAsyncResult BeginGetLogByRangeDate(System.DateTime from, System.DateTime to, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<ChatApplication.ChatServiceReference.MessageDTO> EndGetLogByRangeDate(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChat/GetLog", ReplyAction="http://tempuri.org/IChat/GetLogResponse")]
        System.Collections.Generic.List<ChatApplication.ChatServiceReference.MessageDTO> GetLog();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IChat/GetLog", ReplyAction="http://tempuri.org/IChat/GetLogResponse")]
        System.IAsyncResult BeginGetLog(System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<ChatApplication.ChatServiceReference.MessageDTO> EndGetLog(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChat/GetAllUsers", ReplyAction="http://tempuri.org/IChat/GetAllUsersResponse")]
        System.Collections.Generic.List<ChatApplication.ChatServiceReference.UserDTO> GetAllUsers();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IChat/GetAllUsers", ReplyAction="http://tempuri.org/IChat/GetAllUsersResponse")]
        System.IAsyncResult BeginGetAllUsers(System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<ChatApplication.ChatServiceReference.UserDTO> EndGetAllUsers(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, IsTerminating=true, Action="http://tempuri.org/IChat/Disconnect")]
        void Disconnect(ChatApplication.ChatServiceReference.UserDTO client);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, IsTerminating=true, AsyncPattern=true, Action="http://tempuri.org/IChat/Disconnect")]
        System.IAsyncResult BeginDisconnect(ChatApplication.ChatServiceReference.UserDTO client, System.AsyncCallback callback, object asyncState);
        
        void EndDisconnect(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IChatCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChat/RefreshClients")]
        void RefreshClients(System.Collections.Generic.List<ChatApplication.ChatServiceReference.UserDTO> users);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://tempuri.org/IChat/RefreshClients")]
        System.IAsyncResult BeginRefreshClients(System.Collections.Generic.List<ChatApplication.ChatServiceReference.UserDTO> users, System.AsyncCallback callback, object asyncState);
        
        void EndRefreshClients(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChat/Receive")]
        void Receive(ChatApplication.ChatServiceReference.MessageDTO msg);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://tempuri.org/IChat/Receive")]
        System.IAsyncResult BeginReceive(ChatApplication.ChatServiceReference.MessageDTO msg, System.AsyncCallback callback, object asyncState);
        
        void EndReceive(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChat/ReturnUser")]
        void ReturnUser(ChatApplication.ChatServiceReference.UserDTO msg);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://tempuri.org/IChat/ReturnUser")]
        System.IAsyncResult BeginReturnUser(ChatApplication.ChatServiceReference.UserDTO msg, System.AsyncCallback callback, object asyncState);
        
        void EndReturnUser(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IChatChannel : ChatApplication.ChatServiceReference.IChat, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ConnectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ConnectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public ChatApplication.ChatServiceReference.ConnectedStatuses Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((ChatApplication.ChatServiceReference.ConnectedStatuses)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetLogByUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetLogByUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<ChatApplication.ChatServiceReference.MessageDTO> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<ChatApplication.ChatServiceReference.MessageDTO>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetLogByRangeDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetLogByRangeDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<ChatApplication.ChatServiceReference.MessageDTO> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<ChatApplication.ChatServiceReference.MessageDTO>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetLogCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetLogCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<ChatApplication.ChatServiceReference.MessageDTO> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<ChatApplication.ChatServiceReference.MessageDTO>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAllUsersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAllUsersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<ChatApplication.ChatServiceReference.UserDTO> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<ChatApplication.ChatServiceReference.UserDTO>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ChatClient : System.ServiceModel.DuplexClientBase<ChatApplication.ChatServiceReference.IChat>, ChatApplication.ChatServiceReference.IChat {
        
        private BeginOperationDelegate onBeginConnectDelegate;
        
        private EndOperationDelegate onEndConnectDelegate;
        
        private System.Threading.SendOrPostCallback onConnectCompletedDelegate;
        
        private BeginOperationDelegate onBeginSayDelegate;
        
        private EndOperationDelegate onEndSayDelegate;
        
        private System.Threading.SendOrPostCallback onSayCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetLogByUserDelegate;
        
        private EndOperationDelegate onEndGetLogByUserDelegate;
        
        private System.Threading.SendOrPostCallback onGetLogByUserCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetLogByRangeDateDelegate;
        
        private EndOperationDelegate onEndGetLogByRangeDateDelegate;
        
        private System.Threading.SendOrPostCallback onGetLogByRangeDateCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetLogDelegate;
        
        private EndOperationDelegate onEndGetLogDelegate;
        
        private System.Threading.SendOrPostCallback onGetLogCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAllUsersDelegate;
        
        private EndOperationDelegate onEndGetAllUsersDelegate;
        
        private System.Threading.SendOrPostCallback onGetAllUsersCompletedDelegate;
        
        private BeginOperationDelegate onBeginDisconnectDelegate;
        
        private EndOperationDelegate onEndDisconnectDelegate;
        
        private System.Threading.SendOrPostCallback onDisconnectCompletedDelegate;
        
        public ChatClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ChatClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ChatClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ChatClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ChatClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public event System.EventHandler<ConnectCompletedEventArgs> ConnectCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> SayCompleted;
        
        public event System.EventHandler<GetLogByUserCompletedEventArgs> GetLogByUserCompleted;
        
        public event System.EventHandler<GetLogByRangeDateCompletedEventArgs> GetLogByRangeDateCompleted;
        
        public event System.EventHandler<GetLogCompletedEventArgs> GetLogCompleted;
        
        public event System.EventHandler<GetAllUsersCompletedEventArgs> GetAllUsersCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DisconnectCompleted;
        
        public ChatApplication.ChatServiceReference.ConnectedStatuses Connect(ChatApplication.ChatServiceReference.UserDTO client) {
            return base.Channel.Connect(client);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginConnect(ChatApplication.ChatServiceReference.UserDTO client, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginConnect(client, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public ChatApplication.ChatServiceReference.ConnectedStatuses EndConnect(System.IAsyncResult result) {
            return base.Channel.EndConnect(result);
        }
        
        private System.IAsyncResult OnBeginConnect(object[] inValues, System.AsyncCallback callback, object asyncState) {
            ChatApplication.ChatServiceReference.UserDTO client = ((ChatApplication.ChatServiceReference.UserDTO)(inValues[0]));
            return this.BeginConnect(client, callback, asyncState);
        }
        
        private object[] OnEndConnect(System.IAsyncResult result) {
            ChatApplication.ChatServiceReference.ConnectedStatuses retVal = this.EndConnect(result);
            return new object[] {
                    retVal};
        }
        
        private void OnConnectCompleted(object state) {
            if ((this.ConnectCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ConnectCompleted(this, new ConnectCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ConnectAsync(ChatApplication.ChatServiceReference.UserDTO client) {
            this.ConnectAsync(client, null);
        }
        
        public void ConnectAsync(ChatApplication.ChatServiceReference.UserDTO client, object userState) {
            if ((this.onBeginConnectDelegate == null)) {
                this.onBeginConnectDelegate = new BeginOperationDelegate(this.OnBeginConnect);
            }
            if ((this.onEndConnectDelegate == null)) {
                this.onEndConnectDelegate = new EndOperationDelegate(this.OnEndConnect);
            }
            if ((this.onConnectCompletedDelegate == null)) {
                this.onConnectCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnConnectCompleted);
            }
            base.InvokeAsync(this.onBeginConnectDelegate, new object[] {
                        client}, this.onEndConnectDelegate, this.onConnectCompletedDelegate, userState);
        }
        
        public void Say(ChatApplication.ChatServiceReference.MessageDTO msg) {
            base.Channel.Say(msg);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSay(ChatApplication.ChatServiceReference.MessageDTO msg, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSay(msg, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndSay(System.IAsyncResult result) {
            base.Channel.EndSay(result);
        }
        
        private System.IAsyncResult OnBeginSay(object[] inValues, System.AsyncCallback callback, object asyncState) {
            ChatApplication.ChatServiceReference.MessageDTO msg = ((ChatApplication.ChatServiceReference.MessageDTO)(inValues[0]));
            return this.BeginSay(msg, callback, asyncState);
        }
        
        private object[] OnEndSay(System.IAsyncResult result) {
            this.EndSay(result);
            return null;
        }
        
        private void OnSayCompleted(object state) {
            if ((this.SayCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SayCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SayAsync(ChatApplication.ChatServiceReference.MessageDTO msg) {
            this.SayAsync(msg, null);
        }
        
        public void SayAsync(ChatApplication.ChatServiceReference.MessageDTO msg, object userState) {
            if ((this.onBeginSayDelegate == null)) {
                this.onBeginSayDelegate = new BeginOperationDelegate(this.OnBeginSay);
            }
            if ((this.onEndSayDelegate == null)) {
                this.onEndSayDelegate = new EndOperationDelegate(this.OnEndSay);
            }
            if ((this.onSayCompletedDelegate == null)) {
                this.onSayCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSayCompleted);
            }
            base.InvokeAsync(this.onBeginSayDelegate, new object[] {
                        msg}, this.onEndSayDelegate, this.onSayCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<ChatApplication.ChatServiceReference.MessageDTO> GetLogByUser(ChatApplication.ChatServiceReference.UserDTO user) {
            return base.Channel.GetLogByUser(user);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetLogByUser(ChatApplication.ChatServiceReference.UserDTO user, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetLogByUser(user, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<ChatApplication.ChatServiceReference.MessageDTO> EndGetLogByUser(System.IAsyncResult result) {
            return base.Channel.EndGetLogByUser(result);
        }
        
        private System.IAsyncResult OnBeginGetLogByUser(object[] inValues, System.AsyncCallback callback, object asyncState) {
            ChatApplication.ChatServiceReference.UserDTO user = ((ChatApplication.ChatServiceReference.UserDTO)(inValues[0]));
            return this.BeginGetLogByUser(user, callback, asyncState);
        }
        
        private object[] OnEndGetLogByUser(System.IAsyncResult result) {
            System.Collections.Generic.List<ChatApplication.ChatServiceReference.MessageDTO> retVal = this.EndGetLogByUser(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetLogByUserCompleted(object state) {
            if ((this.GetLogByUserCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetLogByUserCompleted(this, new GetLogByUserCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetLogByUserAsync(ChatApplication.ChatServiceReference.UserDTO user) {
            this.GetLogByUserAsync(user, null);
        }
        
        public void GetLogByUserAsync(ChatApplication.ChatServiceReference.UserDTO user, object userState) {
            if ((this.onBeginGetLogByUserDelegate == null)) {
                this.onBeginGetLogByUserDelegate = new BeginOperationDelegate(this.OnBeginGetLogByUser);
            }
            if ((this.onEndGetLogByUserDelegate == null)) {
                this.onEndGetLogByUserDelegate = new EndOperationDelegate(this.OnEndGetLogByUser);
            }
            if ((this.onGetLogByUserCompletedDelegate == null)) {
                this.onGetLogByUserCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetLogByUserCompleted);
            }
            base.InvokeAsync(this.onBeginGetLogByUserDelegate, new object[] {
                        user}, this.onEndGetLogByUserDelegate, this.onGetLogByUserCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<ChatApplication.ChatServiceReference.MessageDTO> GetLogByRangeDate(System.DateTime from, System.DateTime to) {
            return base.Channel.GetLogByRangeDate(from, to);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetLogByRangeDate(System.DateTime from, System.DateTime to, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetLogByRangeDate(from, to, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<ChatApplication.ChatServiceReference.MessageDTO> EndGetLogByRangeDate(System.IAsyncResult result) {
            return base.Channel.EndGetLogByRangeDate(result);
        }
        
        private System.IAsyncResult OnBeginGetLogByRangeDate(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.DateTime from = ((System.DateTime)(inValues[0]));
            System.DateTime to = ((System.DateTime)(inValues[1]));
            return this.BeginGetLogByRangeDate(from, to, callback, asyncState);
        }
        
        private object[] OnEndGetLogByRangeDate(System.IAsyncResult result) {
            System.Collections.Generic.List<ChatApplication.ChatServiceReference.MessageDTO> retVal = this.EndGetLogByRangeDate(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetLogByRangeDateCompleted(object state) {
            if ((this.GetLogByRangeDateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetLogByRangeDateCompleted(this, new GetLogByRangeDateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetLogByRangeDateAsync(System.DateTime from, System.DateTime to) {
            this.GetLogByRangeDateAsync(from, to, null);
        }
        
        public void GetLogByRangeDateAsync(System.DateTime from, System.DateTime to, object userState) {
            if ((this.onBeginGetLogByRangeDateDelegate == null)) {
                this.onBeginGetLogByRangeDateDelegate = new BeginOperationDelegate(this.OnBeginGetLogByRangeDate);
            }
            if ((this.onEndGetLogByRangeDateDelegate == null)) {
                this.onEndGetLogByRangeDateDelegate = new EndOperationDelegate(this.OnEndGetLogByRangeDate);
            }
            if ((this.onGetLogByRangeDateCompletedDelegate == null)) {
                this.onGetLogByRangeDateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetLogByRangeDateCompleted);
            }
            base.InvokeAsync(this.onBeginGetLogByRangeDateDelegate, new object[] {
                        from,
                        to}, this.onEndGetLogByRangeDateDelegate, this.onGetLogByRangeDateCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<ChatApplication.ChatServiceReference.MessageDTO> GetLog() {
            return base.Channel.GetLog();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetLog(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetLog(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<ChatApplication.ChatServiceReference.MessageDTO> EndGetLog(System.IAsyncResult result) {
            return base.Channel.EndGetLog(result);
        }
        
        private System.IAsyncResult OnBeginGetLog(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginGetLog(callback, asyncState);
        }
        
        private object[] OnEndGetLog(System.IAsyncResult result) {
            System.Collections.Generic.List<ChatApplication.ChatServiceReference.MessageDTO> retVal = this.EndGetLog(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetLogCompleted(object state) {
            if ((this.GetLogCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetLogCompleted(this, new GetLogCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetLogAsync() {
            this.GetLogAsync(null);
        }
        
        public void GetLogAsync(object userState) {
            if ((this.onBeginGetLogDelegate == null)) {
                this.onBeginGetLogDelegate = new BeginOperationDelegate(this.OnBeginGetLog);
            }
            if ((this.onEndGetLogDelegate == null)) {
                this.onEndGetLogDelegate = new EndOperationDelegate(this.OnEndGetLog);
            }
            if ((this.onGetLogCompletedDelegate == null)) {
                this.onGetLogCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetLogCompleted);
            }
            base.InvokeAsync(this.onBeginGetLogDelegate, null, this.onEndGetLogDelegate, this.onGetLogCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<ChatApplication.ChatServiceReference.UserDTO> GetAllUsers() {
            return base.Channel.GetAllUsers();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetAllUsers(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAllUsers(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<ChatApplication.ChatServiceReference.UserDTO> EndGetAllUsers(System.IAsyncResult result) {
            return base.Channel.EndGetAllUsers(result);
        }
        
        private System.IAsyncResult OnBeginGetAllUsers(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginGetAllUsers(callback, asyncState);
        }
        
        private object[] OnEndGetAllUsers(System.IAsyncResult result) {
            System.Collections.Generic.List<ChatApplication.ChatServiceReference.UserDTO> retVal = this.EndGetAllUsers(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAllUsersCompleted(object state) {
            if ((this.GetAllUsersCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAllUsersCompleted(this, new GetAllUsersCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAllUsersAsync() {
            this.GetAllUsersAsync(null);
        }
        
        public void GetAllUsersAsync(object userState) {
            if ((this.onBeginGetAllUsersDelegate == null)) {
                this.onBeginGetAllUsersDelegate = new BeginOperationDelegate(this.OnBeginGetAllUsers);
            }
            if ((this.onEndGetAllUsersDelegate == null)) {
                this.onEndGetAllUsersDelegate = new EndOperationDelegate(this.OnEndGetAllUsers);
            }
            if ((this.onGetAllUsersCompletedDelegate == null)) {
                this.onGetAllUsersCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAllUsersCompleted);
            }
            base.InvokeAsync(this.onBeginGetAllUsersDelegate, null, this.onEndGetAllUsersDelegate, this.onGetAllUsersCompletedDelegate, userState);
        }
        
        public void Disconnect(ChatApplication.ChatServiceReference.UserDTO client) {
            base.Channel.Disconnect(client);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDisconnect(ChatApplication.ChatServiceReference.UserDTO client, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDisconnect(client, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndDisconnect(System.IAsyncResult result) {
            base.Channel.EndDisconnect(result);
        }
        
        private System.IAsyncResult OnBeginDisconnect(object[] inValues, System.AsyncCallback callback, object asyncState) {
            ChatApplication.ChatServiceReference.UserDTO client = ((ChatApplication.ChatServiceReference.UserDTO)(inValues[0]));
            return this.BeginDisconnect(client, callback, asyncState);
        }
        
        private object[] OnEndDisconnect(System.IAsyncResult result) {
            this.EndDisconnect(result);
            return null;
        }
        
        private void OnDisconnectCompleted(object state) {
            if ((this.DisconnectCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DisconnectCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DisconnectAsync(ChatApplication.ChatServiceReference.UserDTO client) {
            this.DisconnectAsync(client, null);
        }
        
        public void DisconnectAsync(ChatApplication.ChatServiceReference.UserDTO client, object userState) {
            if ((this.onBeginDisconnectDelegate == null)) {
                this.onBeginDisconnectDelegate = new BeginOperationDelegate(this.OnBeginDisconnect);
            }
            if ((this.onEndDisconnectDelegate == null)) {
                this.onEndDisconnectDelegate = new EndOperationDelegate(this.OnEndDisconnect);
            }
            if ((this.onDisconnectCompletedDelegate == null)) {
                this.onDisconnectCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDisconnectCompleted);
            }
            base.InvokeAsync(this.onBeginDisconnectDelegate, new object[] {
                        client}, this.onEndDisconnectDelegate, this.onDisconnectCompletedDelegate, userState);
        }
    }
}
